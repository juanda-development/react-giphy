{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","Components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","category","type","value","onChange","target","getGifs","a","fetch","encodeURI","response","json","data","gifs","map","img","id","url","images","downsized","title","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAEaA,EAAc,SAAC,GAAwB,IAArBC,EAAoB,EAApBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SATW,SAACC,GACdA,EAAEC,iBACgB,KAAfJ,IACCF,GAAc,SAAAO,GAAQ,OAAKL,GAAL,mBAAmBK,OACzCJ,EAAc,MAKtB,SACG,uBACKK,KAAK,OACLC,MAASP,EACTQ,SAjBa,SAACL,GACtBF,EAAcE,EAAEM,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAQL,GAAR,qBAAAM,EAAA,4DACJ,mCADI,SAEIC,MAAM,gDAAD,OADb,mCACa,cAA8DC,UAAUR,GAAxE,cAFT,cAEbS,EAFa,gBAGEA,EAASC,OAHX,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,IAAKF,EAAIG,OAAOC,UAAUF,IAC1BG,MAAOL,EAAIK,UARA,kBAWZP,GAXY,4CAAH,sDCEPQ,EAAc,SAAC,GAAyB,IAAvBD,EAAsB,EAAtBA,MAAYH,GAAU,EAAdD,GAAc,EAAVC,KACtC,OACI,sBAAKK,UAAY,OAAjB,UACI,qBAAKC,IAAON,EAAKO,IAAOJ,IACxB,kCAAMA,SCFLK,EAAU,SAAC,GAAgB,IAGpC,ECJwB,SAAExB,GAE1B,MAA0BN,mBAAS,CAC/BiB,KAAO,GACPc,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAU,WACPvB,EAAQL,GACN6B,MAAK,SAAAC,GACFH,EAAS,CACLhB,KAAOmB,EACPL,SAAS,SAGlB,CAACzB,IAIG0B,EDf4BK,CAHA,EAAd/B,UAGPiB,EAAd,EAAQN,KAAec,EAAvB,EAAuBA,QAEvB,OACI,mCAEA,sBAAKJ,UAAY,YAAjB,UACQI,GAAW,wCAEXR,EAAOJ,KAAK,SAAAC,GAAG,OACV,cAAC,EAAD,eAAoCA,GAAdA,EAAIC,aEZlCiB,EAAe,WAGxB,MAAoCtC,mBAAS,IAA7C,mBAAOuC,EAAP,KAAmBxC,EAAnB,KAMA,OACI,qCACG,8CACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAGA,6BAESwC,EAAWpB,KAAK,SAAAb,GAAQ,OACvB,cAAC,EAAD,CAEGA,SAAaA,GADNA,Y,MCjB/BkC,IAASC,OAEL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.5c030a3e.chunk.js","sourcesContent":["import React , {useState} from 'react'\nimport PropTypes from 'prop-types';\nexport const AddCategory = ( { setCategories }) => {\n    \n    const [inputValue, setInputValue] = useState(\"\")\n\n    const hadleInputchange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n            e.preventDefault();\n            if(inputValue !== \"\"){\n                setCategories(category => [inputValue,...category])\n                setInputValue('')\n            }\n           \n    }\n    return (\n        <form onSubmit = { handleSubmit }>\n           <input \n                type=\"text\"\n                value = {inputValue}\n                onChange = { hadleInputchange }\n           />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories : PropTypes.func.isRequired\n}\n","export const getGifs = async ( category ) => {\n    const API_KEY ='j7GY5mX719k1OWFij75Tc7B5DXvDKLNu';   \n    const response = await fetch(`https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${encodeURI(category)}&limit=10`);\n    const {data} = await response.json();\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            url: img.images.downsized.url,\n            title: img.title\n        }\n    })\n    return gifs;\n           \n}","import React from 'react'\n\nexport const GifGridItem = ( {title , id, url} ) => {\n    return (\n        <div className = \"card\">\n            <img src = {url} alt = {title} /> \n            <p> { title }</p>\n        </div>\n    )\n}\n","import React, {useEffect, useState} from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem'\n\nexport const GifGrid = ({category}) => {\n\n\n    const { data: images , loading } = useFetchGifs(category);\n   \n    return (\n        <>\n        \n        <div className = \"card-grid\"> \n            {   loading && <p>Loading</p>}\n            {\n                images.map( img => (\n                     <GifGridItem  key = { img.id } { ...img } />\n                ))\n                }\n        </div>\n        </>\n    )\n}\n","import  { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setstate] = useState({\n        data : [],\n        loading: true\n    })\n\n    useEffect(() => {\n       getGifs(category)\n        .then(imgs => {\n            setstate({\n                data : imgs,\n                loading: false\n            });\n        })\n    }, [category])\n\n    \n\n    return state;\n}\n","import React, {useState} from 'react'\nimport { AddCategory } from './AddCategory';\nimport { GifGrid } from './GifGrid';\n\nexport const GifExpertApp = () => {\n\n   \n    const [categories, setCategories] = useState([ ])\n\n    /*const handle = () => {\n        setCategories( [...categories, 'prueba']);\n    }*/\n   \n    return (\n        <>\n           <h2>GifExpertApp</h2> \n           <AddCategory setCategories = { setCategories }/>\n           <hr />\n\n           \n           <ol>\n                { \n                    categories.map( category => (\n                     <GifGrid \n                        key = {category}\n                        category = { category} />\n                    ))\n                }\n           </ol>\n        </>\n    )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './Components/GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}